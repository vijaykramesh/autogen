"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2654],{6973:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>i,metadata:()=>r,quartoRawHtml:()=>d,toc:()=>l});var a=n(5893),o=n(1151);const i={tags:["code generation","debugging"],description:"Use conversable language learning model agents to solve tasks and provide automatic feedback through a comprehensive example of writing, executing, and debugging Python code to compare stock price changes.\n",source_notebook:"/notebook/agentchat_auto_feedback_from_code_execution.ipynb",custom_edit_url:"https://github.com/microsoft/autogen/edit/main/notebook/agentchat_auto_feedback_from_code_execution.ipynb",title:"Task Solving with Code Generation, Execution and Debugging"},s="Task Solving with Code Generation, Execution and Debugging",r={id:"notebooks/agentchat_auto_feedback_from_code_execution",title:"Task Solving with Code Generation, Execution and Debugging",description:"Use conversable language learning model agents to solve tasks and provide automatic feedback through a comprehensive example of writing, executing, and debugging Python code to compare stock price changes.\n",source:"@site/docs/notebooks/agentchat_auto_feedback_from_code_execution.mdx",sourceDirName:"notebooks",slug:"/notebooks/agentchat_auto_feedback_from_code_execution",permalink:"/autogen/docs/notebooks/agentchat_auto_feedback_from_code_execution",draft:!1,unlisted:!1,editUrl:"https://github.com/microsoft/autogen/edit/main/notebook/agentchat_auto_feedback_from_code_execution.ipynb",tags:[{label:"code generation",permalink:"/autogen/docs/tags/code-generation"},{label:"debugging",permalink:"/autogen/docs/tags/debugging"}],version:"current",frontMatter:{tags:["code generation","debugging"],description:"Use conversable language learning model agents to solve tasks and provide automatic feedback through a comprehensive example of writing, executing, and debugging Python code to compare stock price changes.\n",source_notebook:"/notebook/agentchat_auto_feedback_from_code_execution.ipynb",custom_edit_url:"https://github.com/microsoft/autogen/edit/main/notebook/agentchat_auto_feedback_from_code_execution.ipynb",title:"Task Solving with Code Generation, Execution and Debugging"}},c={},l=[{value:"Example Task: Check Stock Price Change",id:"example-task-check-stock-price-change",level:2},{value:"Example Task: Plot Chart",id:"example-task-plot-chart",level:2},{value:"Use a Different Code Execution Environment",id:"use-a-different-code-execution-environment",level:2}],d=['\x3c!--\ntags: ["code generation", "debugging"]\ndescription: |\n    Use conversable language learning model agents to solve tasks and provide automatic feedback through a comprehensive example of writing, executing, and debugging Python code to compare stock price changes.\n--\x3e'];function h(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",img:"img",p:"p",pre:"pre",...(0,o.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)("div",{dangerouslySetInnerHTML:{__html:d[0]}}),"\n",(0,a.jsx)(t.h1,{id:"task-solving-with-code-generation-execution-and-debugging",children:"Task Solving with Code Generation, Execution and Debugging"}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.a,{href:"https://colab.research.google.com/github/microsoft/autogen/blob/main/notebook/agentchat_auto_feedback_from_code_execution.ipynb",children:(0,a.jsx)(t.img,{src:"https://colab.research.google.com/assets/colab-badge.svg",alt:"Open In Colab"})}),"\n",(0,a.jsx)(t.a,{href:"https://github.com/microsoft/autogen/blob/main/notebook/agentchat_auto_feedback_from_code_execution.ipynb",children:(0,a.jsx)(t.img,{src:"https://img.shields.io/badge/Open%20on%20GitHub-grey?logo=github",alt:"Open on GitHub"})})]}),"\n",(0,a.jsxs)(t.p,{children:["AutoGen offers conversable LLM agents, which can be used to solve\nvarious tasks with human or automatic feedback, including tasks that\nrequire using tools via code. Please find documentation about this\nfeature\n",(0,a.jsx)(t.a,{href:"https://microsoft.github.io/autogen/docs/Use-Cases/agent_chat",children:"here"}),"."]}),"\n",(0,a.jsxs)(t.p,{children:["In this notebook, we demonstrate how to use ",(0,a.jsx)(t.code,{children:"AssistantAgent"})," and\n",(0,a.jsx)(t.code,{children:"UserProxyAgent"})," to write code and execute the code. Here\n",(0,a.jsx)(t.code,{children:"AssistantAgent"})," is an LLM-based agent that can write Python code (in a\nPython coding block) for a user to execute for a given task.\n",(0,a.jsx)(t.code,{children:"UserProxyAgent"})," is an agent which serves as a proxy for the human user\nto execute the code written by ",(0,a.jsx)(t.code,{children:"AssistantAgent"}),", or automatically\nexecute the code. Depending on the setting of ",(0,a.jsx)(t.code,{children:"human_input_mode"})," and\n",(0,a.jsx)(t.code,{children:"max_consecutive_auto_reply"}),", the ",(0,a.jsx)(t.code,{children:"UserProxyAgent"})," either solicits\nfeedback from the human user or returns auto-feedback based on the\nresult of code execution (success or failure and corresponding outputs)\nto ",(0,a.jsx)(t.code,{children:"AssistantAgent"}),". ",(0,a.jsx)(t.code,{children:"AssistantAgent"})," will debug the code and suggest\nnew code if the result contains error. The two agents keep communicating\nto each other until the task is done."]}),"\n",(0,a.jsxs)(t.admonition,{title:"Requirements",type:"info",children:[(0,a.jsxs)(t.p,{children:["Install ",(0,a.jsx)(t.code,{children:"pyautogen"}),":"]}),(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-bash",children:"pip install pyautogen\n"})}),(0,a.jsxs)(t.p,{children:["For more information, please refer to the ",(0,a.jsx)(t.a,{href:"../../docs/installation/",children:"installation\nguide"}),"."]})]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:'from typing import Dict, Union\n\nfrom IPython import get_ipython\nfrom IPython.display import display, Image\n\nimport autogen\n\nconfig_list = autogen.config_list_from_json(\n    "OAI_CONFIG_LIST",\n    filter_dict={\n        "model": ["gpt-4", "gpt-4-0314", "gpt4", "gpt-4-32k", "gpt-4-32k-0314", "gpt-4-32k-v0314"],\n    },\n)\n'})}),"\n",(0,a.jsx)(t.admonition,{type:"tip",children:(0,a.jsxs)(t.p,{children:["Learn more about the various ways to configure LLM endpoints\n",(0,a.jsx)(t.a,{href:"../../docs/llm_endpoint_configuration",children:"here"}),"."]})}),"\n",(0,a.jsx)(t.h2,{id:"example-task-check-stock-price-change",children:"Example Task: Check Stock Price Change"}),"\n",(0,a.jsxs)(t.p,{children:["In the example below, let\u2019s see how to use the agents in AutoGen to\nwrite a python script and execute the script. This process involves\nconstructing a ",(0,a.jsx)(t.code,{children:"AssistantAgent"})," to serve as the assistant, along with a\n",(0,a.jsx)(t.code,{children:"UserProxyAgent"})," that acts as a proxy for the human user. In this\nexample demonstrated below, when constructing the ",(0,a.jsx)(t.code,{children:"UserProxyAgent"}),", we\nselect the ",(0,a.jsx)(t.code,{children:"human_input_mode"})," to \u201cNEVER\u201d. This means that the\n",(0,a.jsx)(t.code,{children:"UserProxyAgent"})," will not solicit feedback from the human user. It stops\nreplying when the limit defined by ",(0,a.jsx)(t.code,{children:"max_consecutive_auto_reply"})," is\nreached, or when ",(0,a.jsx)(t.code,{children:"is_termination_msg()"})," returns true for the received\nmessage."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:'# create an AssistantAgent named "assistant"\nassistant = autogen.AssistantAgent(\n    name="assistant",\n    llm_config={\n        "cache_seed": 42,  # seed for caching and reproducibility\n        "config_list": config_list,  # a list of OpenAI API configurations\n        "temperature": 0,  # temperature for sampling\n    },  # configuration for autogen\'s enhanced inference API which is compatible with OpenAI API\n)\n# create a UserProxyAgent instance named "user_proxy"\nuser_proxy = autogen.UserProxyAgent(\n    name="user_proxy",\n    human_input_mode="NEVER",\n    max_consecutive_auto_reply=10,\n    is_termination_msg=lambda x: x.get("content", "").rstrip().endswith("TERMINATE"),\n    code_execution_config={\n        "work_dir": "coding",\n        "use_docker": False,  # Please set use_docker=True if docker is available to run the generated code. Using docker is safer than running the generated code directly.\n    },\n)\n# the assistant receives a message from the user_proxy, which contains the task description\nuser_proxy.initiate_chat(\n    assistant,\n    message="""What date is today? Compare the year-to-date gain for META and TESLA.""",\n)\n'})}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-text",children:'user_proxy (to assistant):\n\nWhat date is today? Compare the year-to-date gain for META and TESLA.\n\n--------------------------------------------------------------------------------\nassistant (to user_proxy):\n\nFirst, let\'s find out today\'s date. Then, we will fetch the stock prices for META (Facebook) and TESLA and calculate the year-to-date gain for both.\n\nStep 1: Get today\'s date\n```python\nfrom datetime import date\ntoday = date.today()\nprint("Today\'s date:", today)\n```\n\nStep 2: Fetch stock prices for META and TESLA\nWe will use the `yfinance` library to fetch the stock prices. If you don\'t have it installed, please install it using the following command:\n\n```sh\npip install yfinance\n```\n\nStep 3: Calculate the year-to-date gain for META and TESLA\n```python\nimport yfinance as yf\nfrom datetime import datetime\n\ndef get_ytd_gain(ticker):\n    stock = yf.Ticker(ticker)\n    start_date = datetime(today.year, 1, 1)\n    end_date = today\n    historical_data = stock.history(start=start_date, end=end_date)\n    start_price = historical_data.iloc[0][\'Close\']\n    end_price = historical_data.iloc[-1][\'Close\']\n    ytd_gain = (end_price - start_price) / start_price * 100\n    return ytd_gain\n\nmeta_ytd_gain = get_ytd_gain("FB")\ntesla_ytd_gain = get_ytd_gain("TSLA")\n\nprint(f"Year-to-date gain for META (Facebook): {meta_ytd_gain:.2f}%")\nprint(f"Year-to-date gain for TESLA: {tesla_ytd_gain:.2f}%")\n```\n\nPlease execute the code blocks in the order mentioned above.\n\n--------------------------------------------------------------------------------\n\n>>>>>>>> EXECUTING CODE BLOCK 0 (inferred language is python)...\n\n>>>>>>>> EXECUTING CODE BLOCK 1 (inferred language is sh)...\n\n>>>>>>>> EXECUTING CODE BLOCK 2 (inferred language is python)...\nuser_proxy (to assistant):\n\nexitcode: 1 (execution failed)\nCode output: \nToday\'s date: 2023-08-29\n\nDefaulting to user installation because normal site-packages is not writeable\nRequirement already satisfied: yfinance in /home/vscode/.local/lib/python3.9/site-packages (0.2.26)\nRequirement already satisfied: numpy>=1.16.5 in /home/vscode/.local/lib/python3.9/site-packages (from yfinance) (1.25.1)\nRequirement already satisfied: requests>=2.31 in /usr/local/lib/python3.9/site-packages (from yfinance) (2.31.0)\nRequirement already satisfied: lxml>=4.9.1 in /home/vscode/.local/lib/python3.9/site-packages (from yfinance) (4.9.3)\nRequirement already satisfied: pytz>=2022.5 in /home/vscode/.local/lib/python3.9/site-packages (from yfinance) (2023.3)\nRequirement already satisfied: frozendict>=2.3.4 in /home/vscode/.local/lib/python3.9/site-packages (from yfinance) (2.3.8)\nRequirement already satisfied: multitasking>=0.0.7 in /home/vscode/.local/lib/python3.9/site-packages (from yfinance) (0.0.11)\nRequirement already satisfied: beautifulsoup4>=4.11.1 in /home/vscode/.local/lib/python3.9/site-packages (from yfinance) (4.12.2)\nRequirement already satisfied: pandas>=1.3.0 in /home/vscode/.local/lib/python3.9/site-packages (from yfinance) (1.3.3)\nRequirement already satisfied: html5lib>=1.1 in /home/vscode/.local/lib/python3.9/site-packages (from yfinance) (1.1)\nRequirement already satisfied: appdirs>=1.4.4 in /home/vscode/.local/lib/python3.9/site-packages (from yfinance) (1.4.4)\nRequirement already satisfied: soupsieve>1.2 in /home/vscode/.local/lib/python3.9/site-packages (from beautifulsoup4>=4.11.1->yfinance) (2.4.1)\nRequirement already satisfied: six>=1.9 in /usr/local/lib/python3.9/site-packages (from html5lib>=1.1->yfinance) (1.16.0)\nRequirement already satisfied: webencodings in /home/vscode/.local/lib/python3.9/site-packages (from html5lib>=1.1->yfinance) (0.5.1)\nRequirement already satisfied: python-dateutil>=2.7.3 in /home/vscode/.local/lib/python3.9/site-packages (from pandas>=1.3.0->yfinance) (2.8.2)\nRequirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.9/site-packages (from requests>=2.31->yfinance) (2023.5.7)\nRequirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.9/site-packages (from requests>=2.31->yfinance) (3.2.0)\nRequirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.9/site-packages (from requests>=2.31->yfinance) (2.0.3)\nRequirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.9/site-packages (from requests>=2.31->yfinance) (3.4)\n\nTraceback (most recent call last):\n  File "", line 14, in <module>\n    meta_ytd_gain = get_ytd_gain("FB")\n  File "", line 6, in get_ytd_gain\n    start_date = datetime(today.year, 1, 1)\nNameError: name \'today\' is not defined\n\n\n--------------------------------------------------------------------------------\nassistant (to user_proxy):\n\nApologies for the error. It seems I forgot to include the `today` variable in the last code block. Here\'s the corrected code:\n\n```python\nimport yfinance as yf\nfrom datetime import datetime, date\n\ntoday = date.today()\n\ndef get_ytd_gain(ticker):\n    stock = yf.Ticker(ticker)\n    start_date = datetime(today.year, 1, 1)\n    end_date = today\n    historical_data = stock.history(start=start_date, end=end_date)\n    start_price = historical_data.iloc[0][\'Close\']\n    end_price = historical_data.iloc[-1][\'Close\']\n    ytd_gain = (end_price - start_price) / start_price * 100\n    return ytd_gain\n\nmeta_ytd_gain = get_ytd_gain("FB")\ntesla_ytd_gain = get_ytd_gain("TSLA")\n\nprint(f"Year-to-date gain for META (Facebook): {meta_ytd_gain:.2f}%")\nprint(f"Year-to-date gain for TESLA: {tesla_ytd_gain:.2f}%")\n```\n\nPlease execute this code block to get the year-to-date gain for META and TESLA.\n\n--------------------------------------------------------------------------------\n\n>>>>>>>> EXECUTING CODE BLOCK 0 (inferred language is python)...\nuser_proxy (to assistant):\n\nexitcode: 1 (execution failed)\nCode output: \nFB: No timezone found, symbol may be delisted\nTraceback (most recent call last):\n  File "", line 16, in <module>\n    meta_ytd_gain = get_ytd_gain("FB")\n  File "", line 11, in get_ytd_gain\n    start_price = historical_data.iloc[0][\'Close\']\n  File "/home/vscode/.local/lib/python3.9/site-packages/pandas/core/indexing.py", line 931, in __getitem__\n    return self._getitem_axis(maybe_callable, axis=axis)\n  File "/home/vscode/.local/lib/python3.9/site-packages/pandas/core/indexing.py", line 1566, in _getitem_axis\n    self._validate_integer(key, axis)\n  File "/home/vscode/.local/lib/python3.9/site-packages/pandas/core/indexing.py", line 1500, in _validate_integer\n    raise IndexError("single positional indexer is out-of-bounds")\nIndexError: single positional indexer is out-of-bounds\n\n\n--------------------------------------------------------------------------------\nassistant (to user_proxy):\n\nI apologize for the error. It seems that the "FB" ticker symbol is not working as expected. Facebook has changed its parent company name to Meta Platforms, Inc., and its ticker symbol has been changed to "META". Let\'s update the code to use the new ticker symbol:\n\n```python\nimport yfinance as yf\nfrom datetime import datetime, date\n\ntoday = date.today()\n\ndef get_ytd_gain(ticker):\n    stock = yf.Ticker(ticker)\n    start_date = datetime(today.year, 1, 1)\n    end_date = today\n    historical_data = stock.history(start=start_date, end=end_date)\n    start_price = historical_data.iloc[0][\'Close\']\n    end_price = historical_data.iloc[-1][\'Close\']\n    ytd_gain = (end_price - start_price) / start_price * 100\n    return ytd_gain\n\nmeta_ytd_gain = get_ytd_gain("META")\ntesla_ytd_gain = get_ytd_gain("TSLA")\n\nprint(f"Year-to-date gain for META (Facebook): {meta_ytd_gain:.2f}%")\nprint(f"Year-to-date gain for TESLA: {tesla_ytd_gain:.2f}%")\n```\n\nPlease execute this updated code block to get the year-to-date gain for META and TESLA.\n\n--------------------------------------------------------------------------------\n\n>>>>>>>> EXECUTING CODE BLOCK 0 (inferred language is python)...\nuser_proxy (to assistant):\n\nexitcode: 0 (execution succeeded)\nCode output: \nYear-to-date gain for META (Facebook): 132.69%\nYear-to-date gain for TESLA: 120.93%\n\n\n--------------------------------------------------------------------------------\nassistant (to user_proxy):\n\nGreat! The code executed successfully. Here are the year-to-date gains for META (Facebook) and TESLA:\n\n- Year-to-date gain for META (Facebook): 132.69%\n- Year-to-date gain for TESLA: 120.93%\n\nPlease note that these values are based on the stock market data at the time of execution and may change as the market fluctuates.\n\nTERMINATE\n\n--------------------------------------------------------------------------------\n'})}),"\n",(0,a.jsxs)(t.p,{children:["The example above involves code execution. In AutoGen, code execution is\ntriggered automatically by the ",(0,a.jsx)(t.code,{children:"UserProxyAgent"})," when it detects an\nexecutable code block in a received message and no human user input is\nprovided. This process occurs in a designated working directory, using a\nDocker container by default. Unless a specific directory is specified,\nAutoGen defaults to the ",(0,a.jsx)(t.code,{children:"autogen/extensions"})," directory. Users have the\noption to specify a different working directory by setting the\n",(0,a.jsx)(t.code,{children:"work_dir"})," argument when constructing a new instance of the\n",(0,a.jsx)(t.code,{children:"UserProxyAgent"}),"."]}),"\n",(0,a.jsx)(t.p,{children:"The whole chat is auto-generated."}),"\n",(0,a.jsx)(t.h2,{id:"example-task-plot-chart",children:"Example Task: Plot Chart"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:'# followup of the previous question\nuser_proxy.send(\n    recipient=assistant,\n    message="""Plot a chart of their stock price change YTD and save to stock_price_ytd.png.""",\n)\n'})}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-text",children:"user_proxy (to assistant):\n\nPlot a chart of their stock price change YTD and save to stock_price_ytd.png.\n\n--------------------------------------------------------------------------------\nassistant (to user_proxy):\n\nTo plot the chart and save it as an image, we will use the `matplotlib` library. If you don't have it installed, please install it using the following command:\n\n```sh\npip install matplotlib\n```\n\nNow, let's plot the chart of the stock price change YTD for META and TESLA and save it to a file named \"stock_price_ytd.png\":\n\n```python\n# filename: plot_stock_price_ytd.py\n\nimport yfinance as yf\nimport matplotlib.pyplot as plt\nfrom datetime import datetime, date\n\ntoday = date.today()\n\ndef get_stock_data(ticker):\n    stock = yf.Ticker(ticker)\n    start_date = datetime(today.year, 1, 1)\n    end_date = today\n    historical_data = stock.history(start=start_date, end=end_date)\n    return historical_data\n\nmeta_data = get_stock_data(\"META\")\ntesla_data = get_stock_data(\"TSLA\")\n\nplt.figure(figsize=(12, 6))\nplt.plot(meta_data.index, meta_data['Close'], label='META (Facebook)')\nplt.plot(tesla_data.index, tesla_data['Close'], label='TESLA')\nplt.xlabel('Date')\nplt.ylabel('Stock Price')\nplt.title('Stock Price Change YTD for META and TESLA')\nplt.legend()\nplt.savefig('stock_price_ytd.png')\nplt.show()\n```\n\nPlease save the above code in a file named \"plot_stock_price_ytd.py\" and execute it using the following command:\n\n```sh\npython plot_stock_price_ytd.py\n```\n\nThis will create a chart of the stock price change YTD for META and TESLA and save it as \"stock_price_ytd.png\" in the same directory where the script is located.\n\n--------------------------------------------------------------------------------\n\n>>>>>>>> EXECUTING CODE BLOCK 0 (inferred language is sh)...\n\n>>>>>>>> EXECUTING CODE BLOCK 1 (inferred language is python)...\n\n>>>>>>>> EXECUTING CODE BLOCK 2 (inferred language is sh)...\nuser_proxy (to assistant):\n\nexitcode: 0 (execution succeeded)\nCode output: \nDefaulting to user installation because normal site-packages is not writeable\nRequirement already satisfied: matplotlib in /home/vscode/.local/lib/python3.9/site-packages (3.7.2)\nRequirement already satisfied: fonttools>=4.22.0 in /home/vscode/.local/lib/python3.9/site-packages (from matplotlib) (4.41.1)\nRequirement already satisfied: kiwisolver>=1.0.1 in /home/vscode/.local/lib/python3.9/site-packages (from matplotlib) (1.4.4)\nRequirement already satisfied: cycler>=0.10 in /home/vscode/.local/lib/python3.9/site-packages (from matplotlib) (0.11.0)\nRequirement already satisfied: pillow>=6.2.0 in /home/vscode/.local/lib/python3.9/site-packages (from matplotlib) (10.0.0)\nRequirement already satisfied: importlib-resources>=3.2.0 in /home/vscode/.local/lib/python3.9/site-packages (from matplotlib) (6.0.0)\nRequirement already satisfied: python-dateutil>=2.7 in /home/vscode/.local/lib/python3.9/site-packages (from matplotlib) (2.8.2)\nRequirement already satisfied: pyparsing<3.1,>=2.3.1 in /home/vscode/.local/lib/python3.9/site-packages (from matplotlib) (3.0.9)\nRequirement already satisfied: packaging>=20.0 in /home/vscode/.local/lib/python3.9/site-packages (from matplotlib) (23.1)\nRequirement already satisfied: contourpy>=1.0.1 in /home/vscode/.local/lib/python3.9/site-packages (from matplotlib) (1.1.0)\nRequirement already satisfied: numpy>=1.20 in /home/vscode/.local/lib/python3.9/site-packages (from matplotlib) (1.25.1)\nRequirement already satisfied: zipp>=3.1.0 in /home/vscode/.local/lib/python3.9/site-packages (from importlib-resources>=3.2.0->matplotlib) (3.16.2)\nRequirement already satisfied: six>=1.5 in /usr/local/lib/python3.9/site-packages (from python-dateutil>=2.7->matplotlib) (1.16.0)\n\nFigure(1200x600)\n\nFigure(1200x600)\n\n\n--------------------------------------------------------------------------------\nassistant (to user_proxy):\n\nGreat! The code executed successfully, and the chart of the stock price change YTD for META and TESLA has been saved as \"stock_price_ytd.png\" in the same directory where the script is located. You can now view the chart by opening the \"stock_price_ytd.png\" file.\n\nTERMINATE\n\n--------------------------------------------------------------------------------\n"})}),"\n",(0,a.jsx)(t.p,{children:"Let\u2019s display the generated figure."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:'try:\n    image = Image(filename="coding/stock_price_ytd.png")\n    display(image)\nexcept FileNotFoundError:\n    print("Image not found. Please check the file name and modify if necessary.")\n'})}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{src:n(4990).Z+"",width:"1200",height:"600"})}),"\n",(0,a.jsx)(t.h2,{id:"use-a-different-code-execution-environment",children:"Use a Different Code Execution Environment"}),"\n",(0,a.jsx)(t.p,{children:"The code execution happened in a separate process, so the plot is not\ndirectly displayed in the notebook. Is it possible to change the code\nexecution environment into IPython?"}),"\n",(0,a.jsxs)(t.p,{children:["Yes! In the following we demonstrate how to extend the ",(0,a.jsx)(t.code,{children:"UserProxyAgent"}),"\nto use a different code execution environment."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:'class IPythonUserProxyAgent(autogen.UserProxyAgent):\n    def __init__(self, name: str, **kwargs):\n        super().__init__(name, **kwargs)\n        self._ipython = get_ipython()\n\n    def generate_init_message(self, *args, **kwargs) -> Union[str, Dict]:\n        return (\n            super().generate_init_message(*args, **kwargs)\n            + """\nIf you suggest code, the code will be executed in IPython."""\n        )\n\n    def run_code(self, code, **kwargs):\n        result = self._ipython.run_cell("%%capture --no-display cap\\n" + code)\n        log = self._ipython.ev("cap.stdout")\n        log += self._ipython.ev("cap.stderr")\n        if result.result is not None:\n            log += str(result.result)\n        exitcode = 0 if result.success else 1\n        if result.error_before_exec is not None:\n            log += f"\\n{result.error_before_exec}"\n            exitcode = 1\n        if result.error_in_exec is not None:\n            log += f"\\n{result.error_in_exec}"\n            exitcode = 1\n        return exitcode, log, None\n'})}),"\n",(0,a.jsxs)(t.p,{children:["The implementation overrides three functions in ",(0,a.jsx)(t.code,{children:"UserProxyAgent"}),": *\nconstructor. We get the ipython instance as the code execution\nenvironment. * ",(0,a.jsx)(t.code,{children:"generate_init_message"}),". We generate a modified initial\nmessage to send to the assistant agent, by adding the info that the\nexecution will be performed in IPython. * ",(0,a.jsx)(t.code,{children:"run_code"}),". We execute the\ncode with the ipython instance."]}),"\n",(0,a.jsxs)(t.p,{children:["With the new ",(0,a.jsx)(t.code,{children:"IPythonUserProxyAgent"}),", we are able to run the code within\nthe current notebook environment and display the plot directly."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:'ipy_user = IPythonUserProxyAgent(\n    "ipython_user_proxy",\n    human_input_mode="NEVER",\n    max_consecutive_auto_reply=10,\n    is_termination_msg=lambda x: x.get("content", "").rstrip().endswith("TERMINATE")\n    or x.get("content", "").rstrip().endswith(\'"TERMINATE".\'),\n)\n# the assistant receives a message from the user, which contains the task description\nipy_user.initiate_chat(\n    assistant,\n    message="""Plot a chart of META and TESLA stock price gain YTD""",\n)\n'})}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-text",children:"ipython_user_proxy (to assistant):\n\nPlot a chart of META and TESLA stock price gain YTD\nIf you suggest code, the code will be executed in IPython.\n\n--------------------------------------------------------------------------------\nassistant (to ipython_user_proxy):\n\nFirst, we need to install the necessary libraries to fetch stock data and plot the chart. Please execute the following code to install the required libraries:\n\n```python\n!pip install yfinance matplotlib\n```\n\nAfter installing the libraries, execute the following code to fetch the stock data and plot the chart:\n\n```python\nimport yfinance as yf\nimport matplotlib.pyplot as plt\nimport datetime\n\n# Get the current date\ntoday = datetime.date.today()\n\n# Calculate the start date for YTD\nstart_date = datetime.date(today.year, 1, 1)\n\n# Fetch stock data for META (Facebook) and TESLA\nmeta = yf.download('FB', start=start_date, end=today)\ntesla = yf.download('TSLA', start=start_date, end=today)\n\n# Calculate the percentage gain for each stock\nmeta['Gain'] = (meta['Close'] / meta['Close'][0]) * 100\ntesla['Gain'] = (tesla['Close'] / tesla['Close'][0]) * 100\n\n# Plot the chart\nplt.figure(figsize=(12, 6))\nplt.plot(meta.index, meta['Gain'], label='META (Facebook)')\nplt.plot(tesla.index, tesla['Gain'], label='TESLA')\nplt.xlabel('Date')\nplt.ylabel('Percentage Gain YTD')\nplt.title('META (Facebook) vs TESLA Stock Price Gain YTD')\nplt.legend()\nplt.grid()\nplt.show()\n```\n\nThis code will fetch the stock data for META (Facebook) and TESLA from the start of the year to the current date, calculate the percentage gain, and plot the chart.\n\n--------------------------------------------------------------------------------\n\n>>>>>>>> EXECUTING CODE BLOCK 0 (inferred language is python)...\n\n>>>>>>>> EXECUTING CODE BLOCK 1 (inferred language is python)...\nipython_user_proxy (to assistant):\n\nexitcode: 0 (execution succeeded)\nCode output: \nDefaulting to user installation because normal site-packages is not writeable\nRequirement already satisfied: yfinance in /home/vscode/.local/lib/python3.9/site-packages (0.2.26)\nRequirement already satisfied: matplotlib in /home/vscode/.local/lib/python3.9/site-packages (3.7.2)\nRequirement already satisfied: html5lib>=1.1 in /home/vscode/.local/lib/python3.9/site-packages (from yfinance) (1.1)\nRequirement already satisfied: pytz>=2022.5 in /home/vscode/.local/lib/python3.9/site-packages (from yfinance) (2023.3)\nRequirement already satisfied: frozendict>=2.3.4 in /home/vscode/.local/lib/python3.9/site-packages (from yfinance) (2.3.8)\nRequirement already satisfied: pandas>=1.3.0 in /home/vscode/.local/lib/python3.9/site-packages (from yfinance) (1.3.3)\nRequirement already satisfied: lxml>=4.9.1 in /home/vscode/.local/lib/python3.9/site-packages (from yfinance) (4.9.3)\nRequirement already satisfied: numpy>=1.16.5 in /home/vscode/.local/lib/python3.9/site-packages (from yfinance) (1.25.1)\nRequirement already satisfied: appdirs>=1.4.4 in /home/vscode/.local/lib/python3.9/site-packages (from yfinance) (1.4.4)\nRequirement already satisfied: beautifulsoup4>=4.11.1 in /home/vscode/.local/lib/python3.9/site-packages (from yfinance) (4.12.2)\nRequirement already satisfied: requests>=2.31 in /usr/local/lib/python3.9/site-packages (from yfinance) (2.31.0)\nRequirement already satisfied: multitasking>=0.0.7 in /home/vscode/.local/lib/python3.9/site-packages (from yfinance) (0.0.11)\nRequirement already satisfied: kiwisolver>=1.0.1 in /home/vscode/.local/lib/python3.9/site-packages (from matplotlib) (1.4.4)\nRequirement already satisfied: importlib-resources>=3.2.0 in /home/vscode/.local/lib/python3.9/site-packages (from matplotlib) (6.0.0)\nRequirement already satisfied: pillow>=6.2.0 in /home/vscode/.local/lib/python3.9/site-packages (from matplotlib) (10.0.0)\nRequirement already satisfied: python-dateutil>=2.7 in /home/vscode/.local/lib/python3.9/site-packages (from matplotlib) (2.8.2)\nRequirement already satisfied: fonttools>=4.22.0 in /home/vscode/.local/lib/python3.9/site-packages (from matplotlib) (4.41.1)\nRequirement already satisfied: pyparsing<3.1,>=2.3.1 in /home/vscode/.local/lib/python3.9/site-packages (from matplotlib) (3.0.9)\nRequirement already satisfied: packaging>=20.0 in /home/vscode/.local/lib/python3.9/site-packages (from matplotlib) (23.1)\nRequirement already satisfied: contourpy>=1.0.1 in /home/vscode/.local/lib/python3.9/site-packages (from matplotlib) (1.1.0)\nRequirement already satisfied: cycler>=0.10 in /home/vscode/.local/lib/python3.9/site-packages (from matplotlib) (0.11.0)\nRequirement already satisfied: soupsieve>1.2 in /home/vscode/.local/lib/python3.9/site-packages (from beautifulsoup4>=4.11.1->yfinance) (2.4.1)\nRequirement already satisfied: six>=1.9 in /usr/local/lib/python3.9/site-packages (from html5lib>=1.1->yfinance) (1.16.0)\nRequirement already satisfied: webencodings in /home/vscode/.local/lib/python3.9/site-packages (from html5lib>=1.1->yfinance) (0.5.1)\nRequirement already satisfied: zipp>=3.1.0 in /home/vscode/.local/lib/python3.9/site-packages (from importlib-resources>=3.2.0->matplotlib) (3.16.2)\nRequirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.9/site-packages (from requests>=2.31->yfinance) (3.4)\nRequirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.9/site-packages (from requests>=2.31->yfinance) (2.0.3)\nRequirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.9/site-packages (from requests>=2.31->yfinance) (2023.5.7)\nRequirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.9/site-packages (from requests>=2.31->yfinance) (3.2.0)\n\n[notice] A new release of pip is available: 23.0.1 -> 23.2.1\n[notice] To update, run: pip install --upgrade pip\n\n[*********************100%***********************]  1 of 1 completed\n[*********************100%***********************]  1 of 1 completed\n\n1 Failed download:\n['FB']: Exception('%ticker%: No timezone found, symbol may be delisted')\n\n\n--------------------------------------------------------------------------------\nassistant (to ipython_user_proxy):\n\nIt seems that there was an issue with fetching the stock data for META (Facebook) using the ticker symbol 'FB'. The stock symbol for META has been changed to 'META' recently. Let's update the code to use the new symbol and try again:\n\n```python\nimport yfinance as yf\nimport matplotlib.pyplot as plt\nimport datetime\n\n# Get the current date\ntoday = datetime.date.today()\n\n# Calculate the start date for YTD\nstart_date = datetime.date(today.year, 1, 1)\n\n# Fetch stock data for META (Facebook) and TESLA\nmeta = yf.download('META', start=start_date, end=today)\ntesla = yf.download('TSLA', start=start_date, end=today)\n\n# Calculate the percentage gain for each stock\nmeta['Gain'] = (meta['Close'] / meta['Close'][0]) * 100\ntesla['Gain'] = (tesla['Close'] / tesla['Close'][0]) * 100\n\n# Plot the chart\nplt.figure(figsize=(12, 6))\nplt.plot(meta.index, meta['Gain'], label='META (Facebook)')\nplt.plot(tesla.index, tesla['Gain'], label='TESLA')\nplt.xlabel('Date')\nplt.ylabel('Percentage Gain YTD')\nplt.title('META (Facebook) vs TESLA Stock Price Gain YTD')\nplt.legend()\nplt.grid()\nplt.show()\n```\n\nPlease execute the updated code to fetch the stock data and plot the chart.\n\n--------------------------------------------------------------------------------\n\n>>>>>>>> EXECUTING CODE BLOCK 0 (inferred language is python)...\nipython_user_proxy (to assistant):\n\nexitcode: 0 (execution succeeded)\nCode output: \n[*********************100%***********************]  1 of 1 completed\n[*********************100%***********************]  1 of 1 completed\n\n\n--------------------------------------------------------------------------------\nassistant (to ipython_user_proxy):\n\nI'm glad the code executed successfully. You should now see a chart comparing the YTD percentage gain of META (Facebook) and TESLA stocks. If you have any further questions or need assistance with another task, feel free to ask.\n\nTERMINATE\n\n--------------------------------------------------------------------------------\n"})}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-text",children:"IndexError: index 0 is out of bounds for axis 0 with size 0\n"})}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{src:n(3657).Z+"",width:"1006",height:"547"})})]})}function p(e={}){const{wrapper:t}={...(0,o.a)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},4990:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/cell-5-output-1-0ea5c577bd4febd10744470d9c028aea.png"},3657:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/cell-7-output-3-70b326d5c8e4939feb3f0354d82ddb56.png"},1151:(e,t,n)=>{n.d(t,{Z:()=>r,a:()=>s});var a=n(7294);const o={},i=a.createContext(o);function s(e){const t=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),a.createElement(i.Provider,{value:t},e.children)}}}]);